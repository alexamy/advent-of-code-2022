// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var InstructionParse = /* @__PURE__ */Caml_exceptions.create("Solution05.Process.InstructionParse");

function parseInstruction(input) {
  var result = Belt_Option.getWithDefault(Belt_Option.map(Caml_option.null_to_opt(/^move (\d+) from (\d+) to (\d+)$/.exec(input)), (function (prim) {
                  return prim;
                })), []).slice(1).map(function (result) {
        return Belt_Option.getWithDefault(Belt_Option.flatMap((result == null) ? undefined : Caml_option.some(result), Belt_Int.fromString), 0);
      });
  if (result.length !== 3) {
    throw {
          RE_EXN_ID: InstructionParse,
          Error: new Error()
        };
  }
  var count = result[0];
  var from = result[1];
  var to_ = result[2];
  return {
          from: from,
          to_: to_,
          count: count
        };
}

function parseCrates(input) {
  return input;
}

function splitLines(input) {
  var lines = input.split("\n");
  var emptyLineIndex = lines.indexOf("");
  var match = Belt_Array.partition(lines, (function (line) {
          var index = lines.indexOf(line);
          return index < emptyLineIndex;
        }));
  var crates = match[0].slice(0, -1);
  var instructions = match[1].slice(1);
  return [
          crates,
          instructions
        ];
}

function split(input) {
  var match = splitLines(input);
  var instructions = match[1].map(parseInstruction);
  return [
          match[0],
          instructions
        ];
}

var Process = {
  InstructionParse: InstructionParse,
  parseInstruction: parseInstruction,
  parseCrates: parseCrates,
  splitLines: splitLines,
  split: split
};

var solve1 = split;

export {
  Process ,
  solve1 ,
}
/* No side effect */
