// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

function parse(input) {
  return input.split("\n").map(Belt_Int.fromString);
}

function split(_calories, result) {
  while(true) {
    var calories = _calories;
    var length = calories.length;
    var endIndex = Belt_Option.getWithDefault(Belt_Array.getIndexBy(calories, Belt_Option.isNone), length);
    var one = calories.slice(0, endIndex).map(function (__x) {
          return Belt_Option.getWithDefault(__x, 0);
        });
    result.push(one);
    var others = calories.slice(endIndex + 1 | 0);
    var match = others.length;
    if (match === 0) {
      return result;
    }
    _calories = others;
    continue ;
  };
}

function sum(arr) {
  return arr.reduce((function (a, b) {
                return a + b | 0;
              }), 0);
}

function maxSorter(a, b) {
  return b - a | 0;
}

function solve1(input) {
  return Caml_splice_call.spliceApply(Math.max, [split(parse(input), []).map(sum)]);
}

function solve2(input) {
  return sum(split(parse(input), []).map(sum).sort(maxSorter).slice(0, 3));
}

export {
  parse ,
  split ,
  sum ,
  maxSorter ,
  solve1 ,
  solve2 ,
}
/* No side effect */
