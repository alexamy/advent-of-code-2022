// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

function parse(input) {
  return Belt_List.fromArray(input.split("\n").map(Belt_Int.fromString));
}

function split(_calories, _one, _acc) {
  while(true) {
    var acc = _acc;
    var one = _one;
    var calories = _calories;
    if (!calories) {
      return {
              hd: one,
              tl: acc
            };
    }
    var calorie = calories.hd;
    if (calorie !== undefined) {
      _one = {
        hd: Caml_option.valFromOption(calorie),
        tl: one
      };
      _calories = calories.tl;
      continue ;
    }
    _acc = {
      hd: one,
      tl: acc
    };
    _one = /* [] */0;
    _calories = calories.tl;
    continue ;
  };
}

function splitBags(calories) {
  return Belt_List.toArray(split(calories, /* [] */0, /* [] */0)).map(Belt_List.toArray);
}

function sum(arr) {
  return arr.reduce((function (a, b) {
                return a + b | 0;
              }), 0);
}

function maxSorter(a, b) {
  return b - a | 0;
}

function solve1(input) {
  return Caml_splice_call.spliceApply(Math.max, [splitBags(parse(input)).map(sum)]);
}

function solve2(input) {
  return sum(splitBags(parse(input)).map(sum).sort(maxSorter).slice(0, 3));
}

export {
  parse ,
  split ,
  splitBags ,
  sum ,
  maxSorter ,
  solve1 ,
  solve2 ,
}
/* No side effect */
